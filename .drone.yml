---
pipeline:
  build-test-image:
    image: docker
    commands:
    - docker login -u "$PRIVATE_DOCKER_USERNAME" -p "$PRIVATE_DOCKER_PASSWORD" https://registry.jutonz.com
    - docker pull $IMAGE:latest
    - docker build --cache-from $IMAGE:latest -f docker/ci/testimage/Dockerfile -t $IMAGE:$TAG .
    secrets: [ PRIVATE_DOCKER_USERNAME, PRIVATE_DOCKER_PASSWORD ]
    environment:
    - PRIVATE_DOCKER_USERNAME=$$PRIVATE_DOCKER_USERNAME
    - PRIVATE_DOCKER_PASSWORD=$$PRIVATE_DOCKER_PASSWORD
    - IMAGE=registry.jutonz.com/jutonz/homepage-ci-testimage
    - TAG=12
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]
  cleanup-pre:
    image: registry.jutonz.com/jutonz/homepage-ci-testimage:12
    commands:
    - dctl down
    - dctl rm -f
    - dctl cleanup
    - docker volume prune -f
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]

  build-local-dev-psql:
    image: registry.jutonz.com/jutonz/homepage-ci-testimage:12
    group: build
    commands:
    - dctl pull $SERVICE --version=latest || true
    - dctl build $SERVICE --cache-from=`dctl tag-for $SERVICE --version=latest`
    environment: ["SERVICE=psql"]
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]
  build-local-dev-app:
    image: registry.jutonz.com/jutonz/homepage-ci-testimage:12
    group: build
    commands:
    - dctl pull $SERVICE --version=latest || true
    - dctl build $SERVICE --cache-from=`dctl tag-for $SERVICE --version=latest`
    environment: ["SERVICE=app"]
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]
  build-local-dev-redis:
    image: registry.jutonz.com/jutonz/homepage-ci-testimage:12
    group: build
    commands:
    - dctl pull $SERVICE --version=latest || true
    - dctl build $SERVICE --cache-from=`dctl tag-for $SERVICE --version=latest`
    environment: ["SERVICE=redis"]
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]

  initdb:
    image: registry.jutonz.com/jutonz/homepage-ci-testimage:12
    commands:
    - set -e
    - docker run -v dev_code:/data --name helper busybox true
    - docker cp . helper:/data
    - docker rm helper
    - dctl run --rm psql /etc/initdb.sh
    - dctl run --rm app /etc/seedci.sh
    environment: ["CI=yep"]
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]

  unit-tests:
    group: test
    image: registry.jutonz.com/jutonz/homepage-ci-testimage:12
    commands: ["dctl run --rm app /etc/runtests.sh"]
    environment: ["DCTL_NOSUDO=yeah", "CI=yep"]
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]

  push-test-image:
    image: docker
    group: push
    commands:
    - docker login -u "$PRIVATE_DOCKER_USERNAME" -p "$PRIVATE_DOCKER_PASSWORD" https://registry.jutonz.com
    - docker tag $IMAGE:$TAG $IMAGE:latest
    - docker push $IMAGE:$TAG
    - docker push $IMAGE:latest
    secrets: [ PRIVATE_DOCKER_USERNAME, PRIVATE_DOCKER_PASSWORD ]
    environment:
    - PRIVATE_DOCKER_USERNAME=$$PRIVATE_DOCKER_USERNAME
    - PRIVATE_DOCKER_PASSWORD=$$PRIVATE_DOCKER_PASSWORD
    - IMAGE=registry.jutonz.com/jutonz/homepage-ci-testimage
    - TAG=12
    when: { branch: master }
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]
  push-dev-app:
    group: push
    image: registry.jutonz.com/jutonz/homepage-ci-testimage:12
    commands:
    - docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
    - docker tag `dctl tag-for $SERVICE` `dctl tag-for $SERVICE --version=latest`
    - dctl push $SERVICE
    - docker push `dctl tag-for $SERVICE --version=latest`
    secrets: [ DOCKER_USERNAME, DOCKER_PASSWORD ]
    environment:
    - DOCKER_USERNAME=$$DOCKER_USERNAME
    - DOCKER_PASSWORD=$$DOCKER_PASSWORD
    - SERVICE=app
    when: { branch: master }
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]
  push-dev-psql:
    group: push
    image: registry.jutonz.com/jutonz/homepage-ci-testimage:12
    commands:
    - docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
    - docker tag `dctl tag-for $SERVICE` `dctl tag-for $SERVICE --version=latest`
    - dctl push $SERVICE
    - docker push `dctl tag-for $SERVICE --version=latest`
    secrets: [ DOCKER_USERNAME, DOCKER_PASSWORD ]
    environment:
    - DOCKER_USERNAME=$$DOCKER_USERNAME
    - DOCKER_PASSWORD=$$DOCKER_PASSWORD
    - SERVICE=psql
    when: { branch: master }
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]
  push-dev-redis:
    group: push
    image: registry.jutonz.com/jutonz/homepage-ci-testimage:12
    commands:
    - docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
    - docker tag `dctl tag-for $SERVICE` `dctl tag-for $SERVICE --version=latest`
    - dctl push $SERVICE
    - docker push `dctl tag-for $SERVICE --version=latest`
    secrets: [ DOCKER_USERNAME, DOCKER_PASSWORD ]
    environment:
    - DOCKER_USERNAME=$$DOCKER_USERNAME
    - DOCKER_PASSWORD=$$DOCKER_PASSWORD
    - SERVICE=redis
    when: { branch: master }
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]

  build-prod-redis:
    group: push
    image: registry.jutonz.com/jutonz/homepage-ci-testimage:12
    commands: [". /etc/build-service.sh"]
    secrets: [ kubelet_conf ]
    environment:
    - KUBELET_CONF=$$KUBELET_CONF
    - KUBECONFIG=/root/kubelet.conf
    - DCTL_ENV=prod
    - SERVICE=redis
    when: { branch: master }
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]
  build-prod-psql:
    group: push
    image: registry.jutonz.com/jutonz/homepage-ci-testimage:12
    commands: [". /etc/build-service.sh"]
    secrets: [ kubelet_conf ]
    environment:
    - KUBELET_CONF=$$KUBELET_CONF
    - KUBECONFIG=/root/kubelet.conf
    - DCTL_ENV=prod
    - SERVICE=psql
    when: { branch: master }
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]
  build-prod-app:
    group: push
    image: registry.jutonz.com/jutonz/homepage-ci-testimage:12
    commands: [". /etc/build-service.sh"]
    secrets: [ kubelet_conf ]
    environment:
    - KUBELET_CONF=$$KUBELET_CONF
    - KUBECONFIG=/root/kubelet.conf
    - DCTL_ENV=prod
    - SERVICE=app
    when: { branch: master }
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]

  push-prod-redis:
    group: push-prod
    image: registry.jutonz.com/jutonz/homepage-ci-testimage:12
    commands: [". /etc/push-service.sh"]
    secrets: [kubelet_conf, docker_username, docker_password]
    environment:
    - DOCKER_USERNAME=$$DOCKER_USERNAME
    - DOCKER_PASSWORD=$$DOCKER_PASSWORD
    - KUBELET_CONF=$$KUBELET_CONF
    - KUBECONFIG=/root/kubelet.conf
    - SERVICE=redis
    - DCTL_ENV=prod
    when: { branch: master }
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]
  push-prod-psql:
    group: push-prod
    image: registry.jutonz.com/jutonz/homepage-ci-testimage:12
    commands: [". /etc/push-service.sh"]
    secrets: [kubelet_conf, docker_username, docker_password]
    environment:
    - DOCKER_USERNAME=$$DOCKER_USERNAME
    - DOCKER_PASSWORD=$$DOCKER_PASSWORD
    - KUBELET_CONF=$$KUBELET_CONF
    - KUBECONFIG=/root/kubelet.conf
    - SERVICE=psql
    - DCTL_ENV=prod
    when: { branch: master }
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]
  push-prod-app:
    group: push-prod
    image: registry.jutonz.com/jutonz/homepage-ci-testimage:12
    commands: [". /etc/push-service.sh"]
    secrets: [kubelet_conf, docker_username, docker_password]
    environment:
    - DOCKER_USERNAME=$$DOCKER_USERNAME
    - DOCKER_PASSWORD=$$DOCKER_PASSWORD
    - KUBELET_CONF=$$KUBELET_CONF
    - KUBECONFIG=/root/kubelet.conf
    - SERVICE=app
    - DCTL_ENV=prod
    when: { branch: master }
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]

  deploy-app:
    image: registry.jutonz.com/jutonz/homepage-ci-testimage:12
    group: deploy
    commands: [". /etc/deploy-service.sh"]
    secrets: [ kubelet_conf ]
    environment:
    - KUBELET_CONF=$$KUBELET_CONF
    - KUBECONFIG=/root/kubelet.conf
    - DCTL_ENV=prod
    - SERVICE=app
    when: { branch: master }
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]
  deploy-psql:
    image: registry.jutonz.com/jutonz/homepage-ci-testimage:12
    group: deploy
    commands: [". /etc/deploy-service.sh"]
    secrets: [ kubelet_conf ]
    environment:
    - KUBELET_CONF=$$KUBELET_CONF
    - KUBECONFIG=/root/kubelet.conf
    - DCTL_ENV=prod
    - SERVICE=psql
    when: { branch: master }
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]
  deploy-redis:
    image: registry.jutonz.com/jutonz/homepage-ci-testimage:12
    group: deploy
    commands: [". /etc/deploy-service.sh"]
    secrets: [ kubelet_conf ]
    environment:
    - KUBELET_CONF=$$KUBELET_CONF
    - KUBECONFIG=/root/kubelet.conf
    - DCTL_ENV=prod
    - SERVICE=redis
    when: { branch: master }
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]

  migrate-db:
    image: registry.jutonz.com/jutonz/homepage-ci-testimage:12
    group: migrage
    commands:
      - echo $KUBELET_CONF | base64 -d > $KUBECONFIG
      - export POD=`kubectl get pods -nhomepage | grep app | head -n1 | awk '{print $1}'`
      - kubectl exec $POD -nhomepage -- bash -c 'MIX_ENV=prod mix ecto.migrate'
      - rm -f $KUBECONFIG
    secrets: [ kubelet_conf ]
    environment:
    - KUBELET_CONF=$$KUBELET_CONF
    - KUBECONFIG=/root/kubelet.conf
    when: { branch: master }
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]

  cleanup-post:
    image: registry.jutonz.com/jutonz/homepage-ci-testimage:12
    commands:
    - dctl down
    - dctl rm -f
    - dctl cleanup
    - docker volume prune -f
    when:
      status: [success, failure]
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]

#services:
  #dind:
    #image: docker:dind
    #privileged: true
    #command: ["--storage-driver=overlay2", "--tls=false"]
