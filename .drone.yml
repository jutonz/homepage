---
pipeline:
  build-test-image:
    image: docker
    commands:
    - docker login -u "$PRIVATE_DOCKER_USERNAME" -p "$PRIVATE_DOCKER_PASSWORD" https://registry.jutonz.com
    - docker pull $IMAGE:latest
    - docker build --cache-from $IMAGE:latest -f docker/ci/testimage/Dockerfile -t $IMAGE:$TAG .
    secrets: [ PRIVATE_DOCKER_USERNAME, PRIVATE_DOCKER_PASSWORD ]
    environment:
    - PRIVATE_DOCKER_USERNAME=$$PRIVATE_DOCKER_USERNAME
    - PRIVATE_DOCKER_PASSWORD=$$PRIVATE_DOCKER_PASSWORD
    - IMAGE=registry.jutonz.com/jutonz/homepage-ci-testimage
    - TAG=15
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]

  cleanup-pre:
    group: pre
    image: registry.jutonz.com/jutonz/homepage-ci-testimage:15
    commands:
    - dctl down
    - dctl rm -f
    - dctl cleanup
    - docker volume prune -f
    - docker rm helper || true
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]
  restore-build-cache:
    group: pre
    image: drillster/drone-volume-cache
    restore: true
    mount:
      - ./apps/client/assets/node_modules
      - ./_build
      - ./deps
    volumes:
      - /tmp/cache:/cache

  build-dev-psql:
    image: registry.jutonz.com/jutonz/homepage-ci-testimage:15
    group: build
    commands:
    - dctl pull $SERVICE --version=latest || true
    - dctl build $SERVICE --cache-from=`dctl tag-for $SERVICE --version=latest`
    environment: ["SERVICE=psql"]
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]
  build-dev-app:
    image: registry.jutonz.com/jutonz/homepage-ci-testimage:15
    group: build
    commands:
    - dctl pull $SERVICE --version=latest || true
    - dctl build $SERVICE --cache-from=`dctl tag-for $SERVICE --version=latest`
    environment: ["SERVICE=app"]
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]
  build-dev-redis:
    image: registry.jutonz.com/jutonz/homepage-ci-testimage:15
    group: build
    commands:
    - dctl pull $SERVICE --version=latest || true
    - dctl build $SERVICE --cache-from=`dctl tag-for $SERVICE --version=latest`
    environment: ["SERVICE=redis"]
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]
  build-prod-redis:
    group: build
    image: registry.jutonz.com/jutonz/homepage-ci-testimage:15
    commands: [". /etc/build-service.sh"]
    secrets: [ kubelet_conf ]
    environment:
    - KUBELET_CONF=$$KUBELET_CONF
    - KUBECONFIG=/root/kubelet.conf
    - DCTL_ENV=prod
    - SERVICE=redis
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]
  build-prod-psql:
    group: build
    image: registry.jutonz.com/jutonz/homepage-ci-testimage:15
    commands: [". /etc/build-service.sh"]
    secrets: [ kubelet_conf ]
    environment:
    - KUBELET_CONF=$$KUBELET_CONF
    - KUBECONFIG=/root/kubelet.conf
    - DCTL_ENV=prod
    - SERVICE=psql
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]
  build-prod-app:
    group: build
    image: registry.jutonz.com/jutonz/homepage-ci-testimage:15
    commands: [". /etc/build-service.sh"]
    secrets: [ kubelet_conf ]
    environment:
    - KUBELET_CONF=$$KUBELET_CONF
    - KUBECONFIG=/root/kubelet.conf
    - DCTL_ENV=prod
    - SERVICE=app
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]
  build-prod-nginx:
    group: build
    image: registry.jutonz.com/jutonz/homepage-ci-testimage:15
    commands: [". /etc/build-service.sh"]
    secrets: [ kubelet_conf ]
    environment:
    - KUBELET_CONF=$$KUBELET_CONF
    - KUBECONFIG=/root/kubelet.conf
    - DCTL_ENV=prod
    - SERVICE=nginx
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]
  fetch-node-modules:
    group: build
    image: registry.jutonz.com/jutonz/homepage-ci-testimage:15
    commands:
    - cd apps/client/assets
    - yarn install

  initdb:
    image: registry.jutonz.com/jutonz/homepage-ci-testimage:15
    commands:
    - set -e
    - ruby -ryaml -e "fn = 'docker/dev/docker-compose.yml'; y = YAML.load_file(fn); y['services']['app']['volumes'] = ['ci_code:/app']; File.open(fn, 'w') { |f| f.write(y.to_yaml) }"
    - docker run -v dev_ci_code:/data --name helper busybox true
    - docker cp . helper:/data
    - docker rm helper
    - dctl dbsetup
    environment: ["CI=yep"]
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]

  mix-test:
    group: test
    image: registry.jutonz.com/jutonz/homepage-ci-testimage:15
    commands:
    - dctl run --rm app "'MIX_ENV=test mix coveralls --umbrella'"
    environment: ["DCTL_NOSUDO=yeah", "CI=yep"]
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]
  mix-format:
    group: test
    image: registry.jutonz.com/jutonz/homepage-ci-testimage:15
    commands:
    - dctl run --rm app "'mix format --check-formatted'"
    environment: ["DCTL_NOSUDO=yeah", "CI=yep"]
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]
  eslint:
    group: test
    image: registry.jutonz.com/jutonz/homepage-ci-testimage:15
    commands:
    - cd apps/client/assets
    - yarn lint

  push-test-image:
    image: docker
    group: push
    commands:
    - docker login -u "$PRIVATE_DOCKER_USERNAME" -p "$PRIVATE_DOCKER_PASSWORD" https://registry.jutonz.com
    - docker tag $IMAGE:$TAG $IMAGE:latest
    - docker push $IMAGE:$TAG
    - docker push $IMAGE:latest
    secrets: [ PRIVATE_DOCKER_USERNAME, PRIVATE_DOCKER_PASSWORD ]
    environment:
    - PRIVATE_DOCKER_USERNAME=$$PRIVATE_DOCKER_USERNAME
    - PRIVATE_DOCKER_PASSWORD=$$PRIVATE_DOCKER_PASSWORD
    - IMAGE=registry.jutonz.com/jutonz/homepage-ci-testimage
    - TAG=14
    when: { branch: master }
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]
  push-dev-app:
    group: push
    image: registry.jutonz.com/jutonz/homepage-ci-testimage:15
    commands:
    - docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
    - docker tag `dctl tag-for $SERVICE` `dctl tag-for $SERVICE --version=latest`
    - dctl push $SERVICE
    - docker push `dctl tag-for $SERVICE --version=latest`
    secrets: [ DOCKER_USERNAME, DOCKER_PASSWORD ]
    environment:
    - DOCKER_USERNAME=$$DOCKER_USERNAME
    - DOCKER_PASSWORD=$$DOCKER_PASSWORD
    - SERVICE=app
    when: { branch: master }
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]
  push-dev-psql:
    group: push
    image: registry.jutonz.com/jutonz/homepage-ci-testimage:15
    commands:
    - docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
    - docker tag `dctl tag-for $SERVICE` `dctl tag-for $SERVICE --version=latest`
    - dctl push $SERVICE
    - docker push `dctl tag-for $SERVICE --version=latest`
    secrets: [ DOCKER_USERNAME, DOCKER_PASSWORD ]
    environment:
    - DOCKER_USERNAME=$$DOCKER_USERNAME
    - DOCKER_PASSWORD=$$DOCKER_PASSWORD
    - SERVICE=psql
    when: { branch: master }
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]
  push-dev-redis:
    group: push
    image: registry.jutonz.com/jutonz/homepage-ci-testimage:15
    commands:
    - docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
    - docker tag `dctl tag-for $SERVICE` `dctl tag-for $SERVICE --version=latest`
    - dctl push $SERVICE
    - docker push `dctl tag-for $SERVICE --version=latest`
    secrets: [ DOCKER_USERNAME, DOCKER_PASSWORD ]
    environment:
    - DOCKER_USERNAME=$$DOCKER_USERNAME
    - DOCKER_PASSWORD=$$DOCKER_PASSWORD
    - SERVICE=redis
    when: { branch: master }
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]

  push-prod-redis:
    group: push-prod
    image: registry.jutonz.com/jutonz/homepage-ci-testimage:15
    commands: [". /etc/push-service.sh"]
    secrets: [kubelet_conf, docker_username, docker_password]
    environment:
    - DOCKER_USERNAME=$$DOCKER_USERNAME
    - DOCKER_PASSWORD=$$DOCKER_PASSWORD
    - KUBELET_CONF=$$KUBELET_CONF
    - KUBECONFIG=/root/kubelet.conf
    - SERVICE=redis
    - DCTL_ENV=prod
    when: { branch: master }
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]
  push-prod-psql:
    group: push-prod
    image: registry.jutonz.com/jutonz/homepage-ci-testimage:15
    commands: [". /etc/push-service.sh"]
    secrets: [kubelet_conf, docker_username, docker_password]
    environment:
    - DOCKER_USERNAME=$$DOCKER_USERNAME
    - DOCKER_PASSWORD=$$DOCKER_PASSWORD
    - KUBELET_CONF=$$KUBELET_CONF
    - KUBECONFIG=/root/kubelet.conf
    - SERVICE=psql
    - DCTL_ENV=prod
    when: { branch: master }
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]
  push-prod-app:
    group: push-prod
    image: registry.jutonz.com/jutonz/homepage-ci-testimage:15
    commands: [". /etc/push-service.sh"]
    secrets: [kubelet_conf, docker_username, docker_password]
    environment:
    - DOCKER_USERNAME=$$DOCKER_USERNAME
    - DOCKER_PASSWORD=$$DOCKER_PASSWORD
    - KUBELET_CONF=$$KUBELET_CONF
    - KUBECONFIG=/root/kubelet.conf
    - SERVICE=app
    - DCTL_ENV=prod
    when: { branch: master }
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]
  push-prod-nginx:
    group: push-prod
    image: registry.jutonz.com/jutonz/homepage-ci-testimage:15
    commands: [". /etc/push-service.sh"]
    secrets: [kubelet_conf, docker_username, docker_password]
    environment:
    - DOCKER_USERNAME=$$DOCKER_USERNAME
    - DOCKER_PASSWORD=$$DOCKER_PASSWORD
    - KUBELET_CONF=$$KUBELET_CONF
    - KUBECONFIG=/root/kubelet.conf
    - SERVICE=nginx
    - DCTL_ENV=prod
    when: { branch: master }
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]

  deploy-app:
    image: registry.jutonz.com/jutonz/homepage-ci-testimage:15
    group: deploy
    commands: [". /etc/deploy-service.sh"]
    secrets: [ kubelet_conf ]
    environment:
    - KUBELET_CONF=$$KUBELET_CONF
    - KUBECONFIG=/root/kubelet.conf
    - DCTL_ENV=prod
    - SERVICE=app
    when: { branch: master }
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]
  deploy-psql:
    image: registry.jutonz.com/jutonz/homepage-ci-testimage:15
    group: deploy
    commands: [". /etc/deploy-service.sh"]
    secrets: [ kubelet_conf ]
    environment:
    - KUBELET_CONF=$$KUBELET_CONF
    - KUBECONFIG=/root/kubelet.conf
    - DCTL_ENV=prod
    - SERVICE=psql
    when: { branch: master }
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]
  deploy-redis:
    image: registry.jutonz.com/jutonz/homepage-ci-testimage:15
    group: deploy
    commands: [". /etc/deploy-service.sh"]
    secrets: [ kubelet_conf ]
    environment:
    - KUBELET_CONF=$$KUBELET_CONF
    - KUBECONFIG=/root/kubelet.conf
    - DCTL_ENV=prod
    - SERVICE=redis
    when: { branch: master }
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]
  deploy-nginx:
    image: registry.jutonz.com/jutonz/homepage-ci-testimage:15
    group: deploy
    commands: [". /etc/deploy-service.sh"]
    secrets: [ kubelet_conf ]
    environment:
    - KUBELET_CONF=$$KUBELET_CONF
    - KUBECONFIG=/root/kubelet.conf
    - DCTL_ENV=prod
    - SERVICE=nginx
    when: { branch: master }
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]

  copyback-cache:
    image: registry.jutonz.com/jutonz/homepage-ci-testimage:15
    commands:
    - docker run -v dev_ci_code:/data --name helper busybox true
    - docker cp helper:/data/deps .
    - docker cp helper:/data/_build .
    - docker rm helper
    when:
      status: [success, failure]
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]

  cleanup-post:
    group: post
    image: registry.jutonz.com/jutonz/homepage-ci-testimage:15
    commands:
    - dctl down
    - dctl rm -f
    - dctl cleanup
    - docker volume prune -f
    when:
      status: [success, failure]
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]
  rebuild-build-cache:
    group: post
    image: drillster/drone-volume-cache
    rebuild: true
    mount:
      - ./apps/client/assets/node_modules
      - ./_build
      - ./deps
    when:
      status: [success, failure]
    volumes:
      - /tmp/cache:/cache

#services:
  #dind:
    #image: docker:dind
    #privileged: true
    #command: ["--storage-driver=overlay2", "--tls=false"]
